/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 scene.gltf -t 
Author: KrStolorz (Krzysztof Stolorz) (https://sketchfab.com/KrStolorz)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/1971-gaz-24-volga-lp-784ffea507354f70adf94d7fe0fd4b2a
Title: 1971 GAZ-24 Volga (LP)
*/

import * as THREE from 'three'
import {AnimationAction } from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import {GLTFLoader, } from "three/examples/jsm/loaders/GLTFLoader";

const loader = new GLTFLoader();


type GLTFResult = GLTF & {
  nodes: {
    Object_37: THREE.Mesh
    Object_38: THREE.Mesh
    Object_40: THREE.Mesh
    Object_41: THREE.Mesh
    Object_43: THREE.Mesh
    Object_45: THREE.Mesh
    Object_47: THREE.Mesh
    Object_48: THREE.Mesh
    Object_49: THREE.Mesh
    Object_51: THREE.Mesh
    Object_52: THREE.Mesh
    Object_54: THREE.Mesh
    Object_55: THREE.Mesh
    Object_57: THREE.Mesh
    Object_58: THREE.Mesh
    Object_7: THREE.SkinnedMesh
    Object_8: THREE.SkinnedMesh
    Object_9: THREE.SkinnedMesh
    Object_10: THREE.SkinnedMesh
    Object_11: THREE.SkinnedMesh
    Object_12: THREE.SkinnedMesh
    Object_13: THREE.SkinnedMesh
    Object_14: THREE.SkinnedMesh
    Object_15: THREE.SkinnedMesh
    Object_16: THREE.SkinnedMesh
    Object_17: THREE.SkinnedMesh
    Object_18: THREE.SkinnedMesh
    Object_20: THREE.SkinnedMesh
    Object_22: THREE.SkinnedMesh
    Object_23: THREE.SkinnedMesh
    Object_24: THREE.SkinnedMesh
    Object_25: THREE.SkinnedMesh
    Object_26: THREE.SkinnedMesh
    Object_27: THREE.SkinnedMesh
    Object_29: THREE.SkinnedMesh
    Object_30: THREE.SkinnedMesh
    Object_32: THREE.SkinnedMesh
    Object_33: THREE.SkinnedMesh
    GLTF_created_0_rootJoint: THREE.Bone
  }
  materials: {
    Chrom: THREE.MeshStandardMaterial

    Cutter: THREE.MeshStandardMaterial

    Headlight: THREE.MeshStandardMaterial





    Paint: THREE.MeshStandardMaterial
    Interior_light: THREE.MeshStandardMaterial
    Interior_dark: THREE.MeshStandardMaterial
    Derma: THREE.MeshStandardMaterial
    Black_plastic: THREE.MeshStandardMaterial
    Glass: THREE.MeshStandardMaterial
    Reverse_lights: THREE.MeshStandardMaterial
    Tail_lights: THREE.MeshStandardMaterial
    Orange_plastic: THREE.MeshStandardMaterial
    Rubber: THREE.MeshStandardMaterial
    Underbody: THREE.MeshStandardMaterial
    Black_Paint: THREE.MeshStandardMaterial
    Steel: THREE.MeshStandardMaterial
    Reflector: THREE.MeshStandardMaterial
    material: THREE.MeshStandardMaterial
  }
    animations: AnimationAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh'] | JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/scene.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.GLTF_created_0_rootJoint} />
      <skinnedMesh geometry={nodes.Object_7.geometry} material={materials.Paint} skeleton={nodes.Object_7.skeleton} />
      <skinnedMesh geometry={nodes.Object_8.geometry} material={materials.Chrom} skeleton={nodes.Object_8.skeleton} />
      <skinnedMesh geometry={nodes.Object_9.geometry} material={materials.Interior_light} skeleton={nodes.Object_9.skeleton} />
      <skinnedMesh geometry={nodes.Object_10.geometry} material={materials.Interior_dark} skeleton={nodes.Object_10.skeleton} />
      <skinnedMesh geometry={nodes.Object_11.geometry} material={materials.Derma} skeleton={nodes.Object_11.skeleton} />
      <skinnedMesh geometry={nodes.Object_12.geometry} material={materials.Black_plastic} skeleton={nodes.Object_12.skeleton} />
      <skinnedMesh geometry={nodes.Object_13.geometry} material={materials.Glass} skeleton={nodes.Object_13.skeleton} />
      <skinnedMesh geometry={nodes.Object_14.geometry} material={materials.Reverse_lights} skeleton={nodes.Object_14.skeleton} />
      <skinnedMesh geometry={nodes.Object_15.geometry} material={materials.Tail_lights} skeleton={nodes.Object_15.skeleton} />
      <skinnedMesh geometry={nodes.Object_16.geometry} material={materials.Orange_plastic} skeleton={nodes.Object_16.skeleton} />
      <skinnedMesh geometry={nodes.Object_17.geometry} material={materials.Rubber} skeleton={nodes.Object_17.skeleton} />
      <skinnedMesh geometry={nodes.Object_18.geometry} material={materials.Underbody} skeleton={nodes.Object_18.skeleton} />
      <skinnedMesh geometry={nodes.Object_20.geometry} material={materials.Chrom} skeleton={nodes.Object_20.skeleton} />
      <skinnedMesh geometry={nodes.Object_22.geometry} material={materials.Chrom} skeleton={nodes.Object_22.skeleton} />
      <skinnedMesh geometry={nodes.Object_23.geometry} material={materials.Black_plastic} skeleton={nodes.Object_23.skeleton} />
      <skinnedMesh geometry={nodes.Object_24.geometry} material={materials.Rubber} skeleton={nodes.Object_24.skeleton} />
      <skinnedMesh geometry={nodes.Object_25.geometry} material={materials.Black_Paint} skeleton={nodes.Object_25.skeleton} />
      <skinnedMesh geometry={nodes.Object_26.geometry} material={materials.Steel} skeleton={nodes.Object_26.skeleton} />
      <skinnedMesh geometry={nodes.Object_27.geometry} material={materials.Reflector} skeleton={nodes.Object_27.skeleton} />
      <skinnedMesh geometry={nodes.Object_29.geometry} material={materials.Rubber} skeleton={nodes.Object_29.skeleton} />
      <skinnedMesh geometry={nodes.Object_30.geometry} material={materials.material} skeleton={nodes.Object_30.skeleton} />
      <skinnedMesh geometry={nodes.Object_32.geometry} material={materials.Chrom} skeleton={nodes.Object_32.skeleton} />
      <skinnedMesh geometry={nodes.Object_33.geometry} material={materials.Reflector} skeleton={nodes.Object_33.skeleton} />
    </group>
  )
}

// loader.load('scene.gltf', (obj)=>{})

useGLTF.preload('scene.gltf')
